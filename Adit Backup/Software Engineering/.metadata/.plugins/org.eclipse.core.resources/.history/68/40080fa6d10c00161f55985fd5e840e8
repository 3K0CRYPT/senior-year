package Tests;

import static org.junit.Assert.*;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import CityEvac.Engine;
import CityEvac.Route;

public class JUnitTest {

	private static Engine e;
	
	@BeforeClass
	public static void setUp(){
		e = new Engine();
	}
	
	@Test
	public void BinaryConversionTest() {
		ArrayList<Boolean> bools = new ArrayList<Boolean>();
		bools.add(true); bools.add(false); bools.add(true);   
		assertEquals(e.toDec(bools), 5);
	}
	
	@Test
	public void DecimalConversionTest() {
		assertEquals(e.toBin(10), "1010");
		assertEquals(e.toBin(2), "10");
	}
	
	@Test
	public void TestAnswerInput() {
		ArrayList<Boolean> bools = new ArrayList<Boolean>();
		bools.add(true); bools.add(false); bools.add(true);
		assertTrue(e.compare(bools));
	}
	
	@Test
	public void TestImageLoading() {
		Route r = new Route(true);
		Image bg=null, bridgeUp=null, bridgeDown=null, carIcon=null, boatIcon=null;
		try {                
			bg = ImageIO.read(new File("bg.png"));
		} catch (IOException ex) {
			assertTrue(false);
		}
		
		try {                
			bridgeUp = ImageIO.read(new File("bup.png"));
		} catch (IOException ex) {			
			assertTrue(false);
		}
		
		try {                
			bridgeDown = ImageIO.read(new File("bdown.png"));
		} catch (IOException ex) {			
			assertTrue(false);
		}
		
		try {                
			boatIcon = ImageIO.read(new File("boat.png"));
		} catch (IOException ex) {			
			assertTrue(false);
		}
		
		try {                
			carIcon = ImageIO.read(new File("car.png"));
		} catch (IOException ex) {			
			assertTrue(false);
		}
		
		bg=r.bg;
		bridgeUp=r.bridgeUp;
		bridgeDown=r.bridgeDown;
		carIcon=r.carIcon;
		boatIcon=r.boatIcon;
		
		assertEquals(r.bg,bg);
		assertEquals(r.bridgeDown,bridgeDown);
		assertEquals(r.bridgeUp,bridgeUp);
		assertEquals(r.carIcon,carIcon);
		assertEquals(r.boatIcon,boatIcon);
		
		
	}
	
	//tests if 101 translates to car, boat, car
	@Test
	public void TestSpawnType() {
		ArrayList<Boolean> bools = new ArrayList<Boolean>();
		bools.add(true); bools.add(false); bools.add(true);		
		Engine eng = new Engine(bools);
		assertTrue(eng.routes.get(0).isCar());
		assertTrue(eng.routes.get(1).isBoat());
		assertTrue(eng.routes.get(2).isCar());
	}

	@Test
	public void AnimationTimingTest() {
		int time=0;
		assertEquals(time, 5);
	}
	
	@Test
	public void IncorrectAnswerAnimationTest() {
		ArrayList<Boolean> bools = new ArrayList<Boolean>();
		bools.add(true); bools.add(false); bools.add(true);   
		Boolean bool = false;
		for (int i = 0; i < bools.size(); i++) {
			if (bools.get(i)!=e.getAnswer().get(i)) {
				bool = false;
			}			
		}
		assertTrue(bool);
	}
	
	@Test
	public void TestAutoWindowSizing() {
		ArrayList<Boolean> bools = new ArrayList<Boolean>();
		bools.add(true); bools.add(false); bools.add(true);		
		Engine eng = new Engine(bools);
		assertEquals((int)eng.frame.getSize().getWidth(),bools.size()*100);
		bools.add(false);
		Engine eng2 = new Engine(bools);		
		assertEquals((int)eng2.frame.getSize().getWidth(),bools.size()*100);
	}	
}
